# SPDX-License-Identifier: MIT-0
---
- name: Test Nginx Ingress Controller Installation
  hosts: kubernetes_nodes
  gather_facts: true
  become: false
  vars:
    # Nginx ingress configuration using new structure
    nginx_ingress_kubeconfig:
      # Use default kubeconfig location on target node
      path: ""

    nginx_ingress_helm:
      wait: true
      timeout: "15m"
      force: false
    
    # Override service type if needed (default is already NodePort)
    # nginx_ingress_values:
    #   controller:
    #     service:
    #       type: "LoadBalancer"  # Example override

  pre_tasks:
    - name: Display target node information
      ansible.builtin.debug:
        msg: |
          Target Node Information:
          - Hostname: {{ inventory_hostname }}
          - IP Address: {{ ansible_host }}
          - User: {{ ansible_user }}
          - Python Interpreter: {{ ansible_python_interpreter }}

    - name: Check if target node is reachable
      ansible.builtin.ping:

    - name: Gather system information
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - "system"
          - "network"

    - name: Display system information
      ansible.builtin.debug:
        msg: |
          System Information:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Architecture: {{ ansible_architecture }}
          - Kernel: {{ ansible_kernel }}
          - Hostname: {{ ansible_hostname }}

    - name: Check if kubeconfig exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.kube/config"
      register: kubeconfig_check

    - name: Display kubeconfig status
      ansible.builtin.debug:
        msg: |
          Kubeconfig Status:
          - Path: {{ ansible_env.HOME }}/.kube/config
          - Exists: {{ kubeconfig_check.stat.exists }}
          - Size: {{ kubeconfig_check.stat.size | default('N/A') }} bytes
          - Owner: {{ kubeconfig_check.stat.pw_name | default('N/A') }}

    - name: Fail if kubeconfig doesn't exist
      ansible.builtin.fail:
        msg: "Kubeconfig file not found at {{ ansible_env.HOME }}/.kube/config. Please ensure kubectl is configured on the target node."
      when: not kubeconfig_check.stat.exists

    - name: Test kubectl connectivity
      ansible.builtin.command:
        cmd: kubectl cluster-info
      register: kubectl_test
      changed_when: false
      failed_when: kubectl_test.rc != 0

    - name: Display cluster information
      ansible.builtin.debug:
        msg: |
          Kubernetes Cluster Info:
          {{ kubectl_test.stdout }}

  roles:
    - padminisys.nginx_ingress.nginx

  post_tasks:
    # Check if kubernetes.core collection is available
    - name: Check kubernetes.core collection availability
      ansible.builtin.command:
        cmd: python -c "import kubernetes; print('Available')"
      register: k8s_lib_check
      changed_when: false
      failed_when: false

    - name: Display kubernetes library status
      ansible.builtin.debug:
        msg: |
          🐍 Python Kubernetes Library Status:
          - Available: {{ k8s_lib_check.rc == 0 }}
          {% if k8s_lib_check.rc == 0 %}
          - Status: ✅ kubernetes.core collection available
          {% else %}
          - Status: ❌ kubernetes.core collection not available
          - Error: Please install kubernetes.core collection first
          {% endif %}

    # Fail if kubernetes.core collection is not available
    - name: Ensure kubernetes.core collection is available
      ansible.builtin.fail:
        msg: |
          kubernetes.core collection is required for testing this collection.
          Please install it first:
          ansible-galaxy collection install kubernetes.core
      when: k8s_lib_check.rc != 0

    # Use kubernetes.core modules for robust verification
    - name: Wait for nginx ingress controller deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ nginx_ingress_release.name }}-controller"
        namespace: "{{ nginx_ingress_release.namespace }}"
        kubeconfig: "{{ ansible_env.HOME }}/.kube/config"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      register: deployment_status

    - name: Get nginx ingress controller pods
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ nginx_ingress_release.namespace }}"
        label_selectors:
          - "app.kubernetes.io/name=ingress-nginx"
          - "app.kubernetes.io/component=controller"
        kubeconfig: "{{ ansible_env.HOME }}/.kube/config"
      register: nginx_pods

    - name: Get nginx ingress controller service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ nginx_ingress_release.name }}-controller"
        namespace: "{{ nginx_ingress_release.namespace }}"
        kubeconfig: "{{ ansible_env.HOME }}/.kube/config"
      register: nginx_service

    # Extract service ports
    - name: Extract service ports
      ansible.builtin.set_fact:
        http_nodeport: "{{ nginx_service.resources[0].spec.ports[0].nodePort | default('N/A') }}"
        https_nodeport: "{{ nginx_service.resources[0].spec.ports[1].nodePort | default('N/A') }}"
      when: 
        - nginx_service.resources | length > 0
        - nginx_service.resources[0].spec.type == 'NodePort'
        - nginx_service.resources[0].spec.ports | length > 1

    # Display installation results
    - name: Display installation results
      ansible.builtin.debug:
        msg: |
          🎉 Nginx Ingress Controller Installation Complete!

          📊 Deployment Status:
          - Name: {{ deployment_status.resources[0].metadata.name | default('N/A') }}
          - Namespace: {{ deployment_status.resources[0].metadata.namespace | default('N/A') }}
          - Ready Replicas: {{ deployment_status.resources[0].status.readyReplicas | default(0) }}
          - Available Replicas: {{ deployment_status.resources[0].status.availableReplicas | default(0) }}

          🚀 Pod Status: Running
          - Total Pods: {{ (nginx_pods.resources | default([])) | length }}

          🌐 Service Details:
          - Name: {{ nginx_service.resources[0].metadata.name | default('N/A') }}
          - Type: {{ nginx_service.resources[0].spec.type | default('N/A') }}
          - Cluster IP: {{ nginx_service.resources[0].spec.clusterIP | default('N/A') }}
          {% if nginx_service.resources[0].spec.type == 'NodePort' %}
          - HTTP NodePort: {{ http_nodeport | default('N/A') }}
          - HTTPS NodePort: {{ https_nodeport | default('N/A') }}
          {% endif %}

          ✅ Access URLs:
          {% if nginx_service.resources[0].spec.type == 'NodePort' %}
          - HTTP: http://{{ ansible_host }}:{{ http_nodeport | default('N/A') }}
          - HTTPS: https://{{ ansible_host }}:{{ https_nodeport | default('N/A') }}
          {% elif nginx_service.resources[0].spec.type == 'LoadBalancer' %}
          - LoadBalancer IP: {{ nginx_service.resources[0].status.loadBalancer.ingress[0].ip | default('PENDING') }}
          {% else %}
          - Cluster IP: {{ nginx_service.resources[0].spec.clusterIP | default('N/A') }}
          {% endif %}
      when: 
        - deployment_status.resources | length > 0
        - nginx_service.resources | length > 0
