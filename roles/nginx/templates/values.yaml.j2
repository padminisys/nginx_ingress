# SPDX-License-Identifier: MIT-0
# =============================================================================
# NGINX INGRESS CONTROLLER HELM VALUES
# =============================================================================
# Generated from Ansible template using nginx_ingress_values variable structure
# Chart Version: {{ nginx_ingress_chart.version }}
# App Version: {{ nginx_ingress_chart.app_version }}
# =============================================================================

# Controller Configuration
controller:
  # Image Configuration
  image:
    registry: {{ nginx_ingress_values.controller.image.registry }}
    image: {{ nginx_ingress_values.controller.image.image }}
    tag: {{ nginx_ingress_values.controller.image.tag }}
    pullPolicy: {{ nginx_ingress_values.controller.image.pullPolicy }}

  # Service Configuration
  service:
    enabled: {{ nginx_ingress_values.controller.service.enabled | lower }}
    type: {{ nginx_ingress_values.controller.service.type }}
{% if nginx_ingress_values.controller.service.type == "NodePort" %}
    # NodePort Configuration
    nodePorts:
      http: {{ nginx_ingress_values.controller.service.nodePorts.http }}
      https: {{ nginx_ingress_values.controller.service.nodePorts.https }}
      tcp: {}
      udp: {}
{% endif %}

  # Replica Configuration
  replicaCount: {{ nginx_ingress_values.controller.replicaCount }}

  # Resource Configuration
  resources:
{% if nginx_ingress_values.controller.resources.limits %}
    limits:
{% if nginx_ingress_values.controller.resources.limits.cpu %}
      cpu: {{ nginx_ingress_values.controller.resources.limits.cpu }}
{% endif %}
{% if nginx_ingress_values.controller.resources.limits.memory %}
      memory: {{ nginx_ingress_values.controller.resources.limits.memory }}
{% endif %}
{% endif %}
{% if nginx_ingress_values.controller.resources.requests %}
    requests:
{% if nginx_ingress_values.controller.resources.requests.cpu %}
      cpu: {{ nginx_ingress_values.controller.resources.requests.cpu }}
{% endif %}
{% if nginx_ingress_values.controller.resources.requests.memory %}
      memory: {{ nginx_ingress_values.controller.resources.requests.memory }}
{% endif %}
{% endif %}

  # Node Selection
{% if nginx_ingress_values.controller.nodeSelector %}
  nodeSelector:
{% for key, value in nginx_ingress_values.controller.nodeSelector.items() %}
    {{ key }}: {{ value }}
{% endfor %}
{% endif %}

  # Tolerations
  tolerations: []

  # Affinity
  affinity: {}

  # Pod Security Context
  podSecurityContext: {}

  # Security Context
  securityContext:
{% if nginx_ingress_values.controller.securityContext.capabilities %}
    capabilities:
{% if nginx_ingress_values.controller.securityContext.capabilities.drop %}
      drop:
{% for cap in nginx_ingress_values.controller.securityContext.capabilities.drop %}
        - {{ cap }}
{% endfor %}
{% endif %}
{% if nginx_ingress_values.controller.securityContext.capabilities.add %}
      add:
{% for cap in nginx_ingress_values.controller.securityContext.capabilities.add %}
        - {{ cap }}
{% endfor %}
{% endif %}
{% endif %}
{% if nginx_ingress_values.controller.securityContext.runAsUser %}
    runAsUser: {{ nginx_ingress_values.controller.securityContext.runAsUser }}
{% endif %}
{% if nginx_ingress_values.controller.securityContext.allowPrivilegeEscalation is defined %}
    allowPrivilegeEscalation: {{ nginx_ingress_values.controller.securityContext.allowPrivilegeEscalation | lower }}
{% endif %}

  # Admission Webhooks
  admissionWebhooks:
    enabled: {{ nginx_ingress_values.controller.admissionWebhooks.enabled | lower }}
{% if nginx_ingress_values.controller.admissionWebhooks.patch %}
    patch:
      enabled: {{ nginx_ingress_values.controller.admissionWebhooks.patch.enabled | lower }}
      image:
        registry: {{ nginx_ingress_values.controller.admissionWebhooks.patch.image.registry }}
        image: {{ nginx_ingress_values.controller.admissionWebhooks.patch.image.image }}
        tag: {{ nginx_ingress_values.controller.admissionWebhooks.patch.image.tag }}
        pullPolicy: {{ nginx_ingress_values.controller.admissionWebhooks.patch.image.pullPolicy }}
{% endif %}

  # Configuration Options
  config: {}

# Default Backend Configuration
defaultBackend:
  enabled: {{ nginx_ingress_values.defaultBackend.enabled | lower }}

# RBAC Configuration
rbac:
  create: {{ nginx_ingress_values.rbac.create | lower }}

# Service Account Configuration
serviceAccount:
  create: {{ nginx_ingress_values.serviceAccount.create | lower }}
  name: ""
  automountServiceAccountToken: {{ nginx_ingress_values.serviceAccount.automountServiceAccountToken | lower }}